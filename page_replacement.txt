
#include<stdio.h>
#include<stdlib.h>

void printFrames(int frames[], int frameSize) {
    for (int i = 0; i < frameSize; ++i) {
        if (frames[i] == -1) {
            printf("X ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

//FCFS - first come first serve

void FCFS(int pages[], int frameSize, int n) {

    int frames[frameSize];
    int counter = 0;
    int pageFaults = 0;

    //initialize the frames to -1
    for (int i = 0; i < frameSize; ++i) {
        frames[i] = -1;
    }
 
    //checking for page existence in frames
    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                break;
            }
        }
          //real FCFS now
        if (pageExists == 0) {
            frames[counter] = pages[i];
            ++counter;
            ++pageFaults;
            //limit the counter incrementation to framesize only after that reset it to 0
            if (counter >= frameSize) {
                counter = 0;
            }
        }
        //printing each frame (that why in for loop)
        printf("Frames (FCFS): ");
        printFrames(frames, frameSize);
    }
    //print pagefault also
    printf("Number of page faults using FCFS: %d\n\n", pageFaults);
}

//LRU - Least recently used

void LRU(int pages[], int frameSize, int n) {
    int frames[frameSize];
    //int counter = 0;
    int pageFaults = 0;
   
    int recent[frameSize];
    //recent and frames array used to check the recent used page
    for (int i = 0; i < frameSize; ++i) {
        recent[i] = -1;
        frames[i] = -1;
    }
    //check for page existence in the frames
    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                recent[j] = i;
                break;
            }
        }
        //real LRU logic starts here
        if (pageExists == 0) {
            int leastRecentIndex = 0;
            for (int j = 1; j < frameSize; ++j) {
                if (recent[j] < recent[leastRecentIndex]) {
                    leastRecentIndex = j;
                }
            }
            frames[leastRecentIndex] = pages[i];
            recent[leastRecentIndex] = i;
            ++pageFaults;
        }
        printf("Frames (LRU): ");
        printFrames(frames, frameSize);
    }

    printf("Number of page faults using LRU: %d\n\n", pageFaults);
}

// Optimal: if there is page in frame which is going to be used next time , it should not be replaced

void Optimal(int pages[], int frameSize,int n) {
    int frames[frameSize];
    int pageFaults = 0;
  
   //initialize the frames 
    for (int i = 0; i < frameSize; ++i) {
        frames[i] = -1;
    }
   //check for page existence
    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                break;
            }
        }
        //real Optimal logic
        if (pageExists == 0) {
            int farthest = -1;
            int replaceIndex = -1;
            for (int j = 0; j < frameSize; ++j){
                int futureIndex = 0;
                for (int k = i + 1; k < 20; ++k){
                    if (frames[j] == pages[k]){
                        futureIndex = k;
                        break;
                    }
                }
                if (futureIndex == 0) {
                    replaceIndex = j;
                    break;
                } 
                else{
                    if (futureIndex > farthest) {
                        farthest = futureIndex;
                        replaceIndex = j;
                    }
                }
            }
            frames[replaceIndex] = pages[i];
            ++pageFaults;
        }
        printf("Frames (Optimal): ");
        printFrames(frames, frameSize);
    }

    printf("Number of page faults using Optimal: %d\n\n", pageFaults);
}


int main() {
    int pages[20];
    int n;
    printf("Enter the size of string \n");
    scanf("%d",&n);
    printf("Enter the reference string:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &pages[i]);
    }

    int frameSize = 3;

    FCFS(pages, frameSize,n);
    LRU(pages, frameSize,n);
    Optimal(pages, frameSize,n);

    return 0;
}

/*
OUTPUT >>

Enter the size of string 
12
Enter the reference string:
5 6 7 8 5 6 9 5 6 7 8 9
Frames (FCFS): 5 X X 
Frames (FCFS): 5 6 X 
Frames (FCFS): 5 6 7 
Frames (FCFS): 8 6 7 
Frames (FCFS): 8 5 7 
Frames (FCFS): 8 5 6 
Frames (FCFS): 9 5 6 
Frames (FCFS): 9 5 6 
Frames (FCFS): 9 5 6 
Frames (FCFS): 9 7 6 
Frames (FCFS): 9 7 8 
Frames (FCFS): 9 7 8 
Number of page faults using FCFS: 9

Frames (LRU): 5 X X 
Frames (LRU): 5 6 X 
Frames (LRU): 5 6 7 
Frames (LRU): 8 6 7 
Frames (LRU): 8 5 7 
Frames (LRU): 8 5 6 
Frames (LRU): 9 5 6 
Frames (LRU): 9 5 6 
Frames (LRU): 9 5 6 
Frames (LRU): 7 5 6 
Frames (LRU): 7 8 6 
Frames (LRU): 7 8 9 
Number of page faults using LRU: 10

Frames (Optimal): 5 X X 
Frames (Optimal): 5 6 X 
Frames (Optimal): 5 6 7 
Frames (Optimal): 5 6 8 
Frames (Optimal): 5 6 8 
Frames (Optimal): 5 6 8 
Frames (Optimal): 5 6 9 
Frames (Optimal): 5 6 9 
Frames (Optimal): 5 6 9 
Frames (Optimal): 7 6 9 
Frames (Optimal): 8 6 9 
Frames (Optimal): 8 6 9 
Number of page faults using Optimal: 7

*/